datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          UserRole          @default(USER)

  songs         Songs[]         @relation("UserSongs")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}


model Songs {
  id            String @id @default(cuid())
  slug          String
  songs_title   String
  cover_image   String
  youtube_url   String
  release_year  Int
  songs_key     String
  album         String
  genre         String
  publisher     String
  added_by      String

  isDraft      Boolean @default(true)

  sections Section[]
  artists SongsToArtists[]
  genres  SongsToGenres[]

  user User @relation(fields: [added_by], references: [id],name: "UserSongs",onDelete: Cascade)

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([slug])
}

model Section {
  id              String @id @default(cuid())
  section_name    String
  start_time      Int
  end_time        Int
  section_content String @db.Text
  section_index   Int

  songs_id String

  song Songs @relation(fields: [songs_id], references: [id],onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([section_index, songs_id])
}

model Artist {
  id           String @id @default(cuid())
  artist_name  String
  artist_image String @db.Text
  artist_bio   String? @db.Text

  songs SongsToArtists[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([artist_name])
}

model Genres {
  genre_id         String @id @default(cuid())
  genre_name String
  genre_description String? @db.Text

  songs SongsToGenres[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([genre_name])
}

model SongsToArtists {
  song_id   String
  artist_id String

  song   Songs  @relation(fields: [song_id], references: [id],onDelete: Cascade)
  artist Artist @relation(fields: [artist_id], references: [id],onDelete: Cascade)

  @@id([song_id, artist_id])
}


model SongsToGenres {
  song_id  String
  genre_id String

  song  Songs  @relation(fields: [song_id], references: [id],onDelete: Cascade)
  genre Genres @relation(fields: [genre_id], references: [genre_id],onDelete: Cascade)

  @@id([song_id, genre_id])
}
